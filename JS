// ===================================
// üß± 1. Configuration & Global Variables
// ===================================
const firebaseConfig = {
  apiKey: "AIzaSyDUsBD_dwqR4Y466sA4lXukPA3hqk5-KJY",
  authDomain: "math-p4.firebaseapp.com",
  databaseURL: "https://math-p4-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId: "math-p4",
  storageBucket: "math-p4.appspot.com",
  messagingSenderId: "937474922058",
  appId: "1:937474922058:web:aad038e45ec5b5847bf8b3"
};
firebase.initializeApp(firebaseConfig);
const db = firebase.database();

let playerName = '';
let score = 0;
let level = 1;
let subLevel = 0;
const maxMaxHp = 10;
let hp = 4;
let maxHp = 7;
let answer = 0;
let currentAnswer = '';
let correctCount = 0;
let timer;
let timeLeft = 30;
let timerId = null;
let timeUp = false;
let alreadyEnded = false;
let hasShownLevelMessage = false;
let reviveItemUsed = false;
let lastShownLevelMessage = null;
let lastLevelMessageShown = null;
let bossShakeInterval = null;
let bossShakingTimeout = null;
let currentShakingLevel = null;
let inventory = [];
let isSubmitting = false;

const levelTimerMap = { 50: 40, 60: 40, 100: 40 };
const bossLevels = [10, 20, 30, 40, 50, 60, 70];

const bossData = { ... };
const bossImageURLs = { ... };
const bossImages = { ... };
const bossEffects = { ... };

// ===================================
// üéÆ 2. Game Lifecycle Functions
// ===================================
function updateUI() {
  document.getElementById("score").textContent = score;
 document.getElementById("hearts").innerHTML = "‚ù§Ô∏è".repeat(hp) + "ü§ç".repeat(maxHp - hp);
  document.getElementById("levelTitle").textContent = `‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà ${level}`;
}
function updateHearts() {
  console.log("üîç updateHearts called ‚Äî maxHp =", maxHp, "hp =", hp);
  const heartsEl = document.getElementById("hearts");
  heartsEl.innerHTML = "‚ù§Ô∏è".repeat(hp) + "ü§ç".repeat(maxHp - hp);
}
function updateInventoryUI() {
  const itemList = document.getElementById("item-list");
  itemList.innerHTML = "";

  inventory.forEach((item, index) => {
    const li = document.createElement("li");
    li.textContent = item === "‚ù§Ô∏è" ? "‚ù§Ô∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏î" : "üíé ‡πÄ‡∏û‡∏¥‡πà‡∏° Max HP";
    li.style.cursor = "pointer";
    li.addEventListener("click", () => useItem(index));
    itemList.appendChild(li);
  });
}
function startGame() { ... }
function endGame() { ... }

// ===================================
// ‚è± 3. Timer Functions
// ===================================
function startTimer(seconds, onTimeout) {
  let remaining = seconds;
  const timerEl = document.getElementById("timer");
  const submitBtn = document.getElementById("submitBtn");
  const retryBtn = document.getElementById("retryBtn");
  const feedback = document.getElementById("feedback");

  timeUp = false;
  submitBtn.disabled = false;
  retryBtn.style.display = "none";

  timerEl.textContent = `‚è± ${remaining}s`;

  timerId = setInterval(() => {
    remaining--;
    timerEl.textContent = `‚è± ${remaining}s`;

    if (remaining <= 0) {
      clearInterval(timerId);
      timeUp = true;

      hp--; // ‚úÖ ‡∏´‡∏±‡∏Å HP ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
      updateHearts();

      timerEl.textContent = "‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß!";
      feedback.textContent = `‚è≥ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà`;

      submitBtn.disabled = true;
      retryBtn.style.display = "inline-block";

      if (hp <= 0) {
        saveScore(() => {
          alert(`‡∏à‡∏ö‡πÄ‡∏Å‡∏°‡∏ó‡πà‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏á‡∏•‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏≠‡∏Ñ‡∏≠‡∏¢! ‡∏û‡∏•‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ: ${score}`);
           endGame();
        });
        return;
      }

      if (typeof onTimeout === 'function') onTimeout(); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡πà‡∏≠
    }
  }, 1000);
}
function startFlexibleTimer(level) {
  if (timerId) clearInterval(timerId); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå timer ‡πÄ‡∏Å‡πà‡∏≤
  const duration = levelTimerMap[level] || 10;
  let timeLeft = duration;

  document.getElementById("timer").textContent = `‚è± ${timeLeft}s`;

  timerId = setInterval(() => {
    timeLeft--;
    document.getElementById("timer").textContent = `‚è± ${timeLeft}s`;

    if (timeLeft <= 0) {
      clearInterval(timerId);
      document.getElementById("feedback").textContent = `‚è≥ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤! ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠ ${currentAnswer}`;
      hp--;
      updateHearts();
      setTimeout(() => {
        if (hp > 0) {
          level++;
          generateQuestion();
        } else {
          endGame();
        }
      }, 1500);
    }
  }, 1000);
}
function updateTimerDisplay() {
  document.getElementById("timer").textContent = `‚è± ${timeLeft}`;
}

// ===================================
// ‚ùì 4. Question Generation
// ===================================
function generateQuestion() {

  updateThemeByLevel(level);
const container = document.getElementById("question-grid");
  const body = document.body;
  container.innerHTML = '';
  let a = 0, b = 0, op = '+';
  

  if (isBossLevel(level)) {
  showBoss(level);
} else {
  document.getElementById("bossArea").style.display = "none";
}
   if (isBossLevel(level)) {
    showBoss(level); // ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏≠‡∏™‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ä‡∏±‡πâ‡∏ô‡∏ö‡∏≠‡∏™
  } else {
    hideBoss(); // ‡∏ã‡πà‡∏≠‡∏ô‡∏ö‡∏≠‡∏™
  }

if (level === 1) {
  op = '+';
  a = Math.floor(Math.random() * 90000) + 10000;
  b = Math.floor(Math.random() * 9000) + 1000;
} else if (level >= 2 && level <= 3) {
op = '+';
  a = Math.floor(Math.random() * 900000) + 100000;
  b = Math.floor(Math.random() * 90000) + 10000;
} else if (level >= 4 && level <= 5) {
op = '-';
  a = Math.floor(Math.random() * 900000) + 100000;
  b = Math.floor(Math.random() * 90000) + 10000;
} else if (level >= 6 && level <= 7) {
op = '*';
  a = Math.floor(Math.random() * 50) + 20; 
  b = Math.floor(Math.random() * 50) + 20;
} else if (level >= 8 && level <=9 ) {
  op = '/';
 b = Math.floor(Math.random() * 8) + 2; 
 a = b * (Math.floor(Math.random() * 902) + 99);
} else if (level === 10) {
op = '+';
  a = Math.floor(Math.random() * 90000000) + 10000000;
  b = Math.floor(Math.random() * 9000000) + 1000000;

} else if (level >= 11 && level <= 14) {
  op = '+';
  a = Math.floor(Math.random() * 9000000) + 1000000; 
  b = Math.floor(Math.random() * 900000) + 100000;
} else if (level >= 15 && level <= 19) {
  op = '-';
  a = Math.floor(Math.random() * 9000000) + 1000000; 
  b = Math.floor(Math.random() * 900000) + 100000;
 } else if (level === 20) {
op = '-';
  a = Math.floor(Math.random() * 90000000) + 10000000;
  b = Math.floor(Math.random() * 9000000) + 1000000;

} else if (level >= 21 && level <= 25) {
  op = '*';
  a = Math.floor(Math.random() * 100) + 10; 
  b = Math.floor(Math.random() * 100) + 10;
 } else if (level >= 26 && level <= 29) {
  op = '*';
  a = Math.floor(Math.random() * 1000) + 100; 
  b = Math.floor(Math.random() * 100) + 10;
 } else if (level === 30) {
 op = '*';
  a = Math.floor(Math.random() * 9000) + 1000; 
  b = Math.floor(Math.random() * 900) + 100;

} else if (level >= 31 && level <= 35) {
  op = '/';
   b = Math.floor(Math.random() * 30) + 20; 
  a = b * (Math.floor(Math.random() * 902) + 99);
} else if (level >= 36 && level <= 39) {
  op = '/';
  b = Math.floor(Math.random() * 80) + 20; 
  a = b * (Math.floor(Math.random() * 1000) + 100);
} else if (level === 40) {
 op = '/';
 b = Math.floor(Math.random() * 9000) + 900;
 a = b * (Math.floor(Math.random() * 9000) + 1000);

} else if (level >= 41 && level <= 45) {
  op = '+';
  a = Math.floor(Math.random() * 90000000) + 10000000;
  b = Math.floor(Math.random() * 9000000) + 1000000;
} else if (level >= 46 && level <= 49) {
  op = '-';
  a = Math.floor(Math.random() * 90000000) + 10000000;
  b = Math.floor(Math.random() * 9000000) + 1000000;
}
  if (level >= 1 && level <= 49) {
    let result = 0;
    switch (op) {
      case '+': result = a + b; break;
      case '-': result = a - b; break;
      case '*': result = a * b; break;
      case '/': result = a / b; break;
    }
    currentAnswer = result.toString();
    console.log("‡πÇ‡∏à‡∏ó‡∏¢‡πå:", a, op, b, "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å:", currentAnswer);
    renderVerticalOperation(a, b, op);
showLevelMessage(level);
    if (levelTimerMap[level]) {
      startTimer(levelTimerMap[level], () => {
        document.getElementById("feedback").textContent = `‚è≥ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤! ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠ ${currentAnswer}`;
        hp--;
        updateHearts();
        setTimeout(() => {
          if (hp > 0) {
            level++;
            generateQuestion();
          } else {
            endGame();
          }
        }, 1500);
      });
    }
    return;
  }
  if (level === 50) {
    const q = generateTwoStepPlusMinus();
    expression = q.expression;
    answer = currentAnswer = q.answer;
    renderHorizontalTwoStep(expression);
    if (levelTimerMap[level]) {
      startTimer(levelTimerMap[level], () => {
        document.getElementById("feedback").textContent = `‚è≥ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤! ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠ ${answer}`;
        hp--;
        updateHearts();
        setTimeout(() => {
          if (hp > 0) {
            level++;
            generateQuestion();
          } else {
            endGame();
          }
        }, 1500);
      });
    }
    return;
  }

  if (level >= 51 && level <= 53) {
    clearInterval(timer); // ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    document.getElementById("timer").textContent = "";
    const q = generateDecimalAddition();
    answer = currentAnswer = q.answer;
    renderVerticalDecimalOperation(q.a, q.b, q.operator);
    return;
  }

  if (level >= 54 && level <= 55) {
    const q = generateDecimalSubtraction();
    answer = currentAnswer = q.answer;
    renderVerticalDecimalOperation(q.a, q.b, q.operator);
    return;
  }

  if (level >= 56 && level <= 57) {
    const q = generateDecimalMultiplication();
    answer = currentAnswer = q.answer;
    renderVerticalOperation(q.a, q.b, q.operator);
    return;
  }

  if (level >= 58 && level <= 59) {
    const q = generateDecimalDivision();
    answer = currentAnswer = q.answer;
    renderVerticalOperation(q.a, q.b, q.operator);
    return;
  }

  if (level === 60) {
    const q = generateDecimalAddition();
    answer = currentAnswer = q.answer;
    renderVerticalDecimalOperation(q.a, q.b, q.operator);
    if (levelTimerMap[level]) {
      startTimer(levelTimerMap[level], () => {
        document.getElementById("feedback").textContent = `‚è≥ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤! ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠ ${answer}`;
        hp--;
        updateHearts();
        setTimeout(() => {
          if (hp > 0) {
            level++;
            generateQuestion();
          } else {
            endGame();
          }
        }, 1500);
      });
    }
    return;
  }

  if (level >= 61 && level <= 80) {
  clearInterval(timerId); // ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏°
  document.getElementById("timer").textContent = ""; // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤
  fetchChoiceQuestion(level); // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ä‡πâ‡∏≠‡∏¢‡∏™‡πå‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
  return;
}
  else {
  generateQuestionByLevel(level);
}
}
function generateQuestionByLevel(level) { ... }
function generateTwoStepAddSub() {
  // ‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏´‡πâ‡∏ó‡∏≥ + ‡πÅ‡∏•‡πâ‡∏ß - ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  const a = getRandom(100, 999);
  const b = getRandom(10, 99);
  const c = getRandom(1, 9);
  const expression = `${a} + ${b} - ${c}`;
  const answer = eval(expression).toString();
  return { expression, answer };
}
function generateTwoStepPlusMinus() {
  const patterns = [
    ['+', '-'],
    ['-', '+'],
    ['+', '+'],
    ['-', '-']
  ];
  const [op1, op2] = patterns[Math.floor(Math.random() * patterns.length)];

  let a = getRandom(100, 999);
  let b = getRandom(100, 999);
  let c = getRandom(100, 999);

  // ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö
  if (op1 === '-' && a < b) [a, b] = [b, a];
  const first = eval(`${a} ${op1} ${b}`);

  if (op2 === '-' && first < c) {
    c = getRandom(0, Math.floor(first)); // ‡πÉ‡∏´‡πâ‡∏ú‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö
  }

  const expression = `(${a} ${op1} ${b}) ${op2} ${c}`;
  const answer = eval(expression);

  return {
    expression,
    answer: answer.toString()
  };
}
function generateDecimalAddition() {
  const a = parseFloat((Math.random() * 900 + 100).toFixed(2));
  const b = parseFloat((Math.random() * 900 + 100).toFixed(2));
  const answer = parseFloat((a + b).toFixed(2));
  return { a, b, operator: '+', answer: answer.toString() };
}
function generateDecimalSubtraction() {
  let a = parseFloat((Math.random() * 900 + 100).toFixed(2));
  let b = parseFloat((Math.random() * 900 + 100).toFixed(2));

  if (b > a) [a, b] = [b, a];

  const answer = parseFloat((a - b).toFixed(2));

  return {
    a: a,
    b: b,
    operator: '-',
    answer: answer.toString()
  };
}
function generateDecimalSubtraction() { ... }
function generateDecimalMultiplication() {
  const a = parseFloat((Math.random() * 90 + 10).toFixed(2)); // 10.00 - 100.00
  const b = parseFloat((Math.random() * 9 + 1).toFixed(2));   // 1.00 - 10.00
  const answer = parseFloat((a * b).toFixed(2));
  return { a, b, operator: '*', answer: answer.toString() };
}
function generateDecimalDivision() {
  let b = parseFloat((Math.random() * 9 + 1).toFixed(1)); // 1.00 - 10.00
  let result = parseFloat((Math.random() * 90 + 10).toFixed(2)); // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå 10.00 - 100.00
  let a = parseFloat((result * b).toFixed(2)); // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏á‡∏ï‡∏±‡∏ß
  const answer = (a / b).toFixed(2);

  return {
    a, b, operator: '/', answer: answer.toString()
  };
}
function generateSpecialQuestion(stage, sub) {
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏ï‡πà‡∏•‡∏∞ stage
  const q = generateTwoStepPlusMinus(); 
  currentAnswer = q.answer;
  renderHorizontalTwoStep(q.expression);
  startFlexibleTimer(stage);
} 
function fetchChoiceQuestion(level) { ... }

// ===================================
// üß† 5. Answer Checking
// ===================================
function checkAnswer(ans) {
 console.trace("üìç checkAnswer called");
  console.log("üü¢ [LOG] ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å checkAnswer ‡∏î‡πâ‡∏ß‡∏¢:", ans);
  const feedback = document.getElementById("feedback");
  const userNum = Number(ans);
  const correctNum = Number(currentAnswer);
console.log("User:", userNum, "Correct:", correctNum);
  console.log("Difference:", Math.abs(userNum - correctNum));
    console.trace("checkAnswer called");
  
  console.log("üî¥ [LOG] ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç:", { userNum, correctNum });
  console.log("üî¥ [LOG] ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á:", Math.abs(userNum - correctNum));
   
  if (isNaN(userNum)) {
    console.warn("‚ùå [ERROR] ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç!");
    feedback.textContent = "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
    return;
  }
  const checkingMessages = [
  "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏°‡∏≠‡∏á...",
  "ü•¥ ‡∏ï‡∏≠‡∏ö‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏õ‡∏ô‡∏∞ ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÑ‡∏´‡∏°‡∏ô‡∏∞",
  "üìã ‡πÄ‡∏≠‡πâ...‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏∞‡∏î‡∏£‡∏≠‡∏õ‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏´‡∏°‡∏ô‡∏∞",
  "üëª ‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ñ‡∏£‡∏π‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏∞‡∏ã‡∏¥‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö...",
  "üßô‚Äç‚ôÇÔ∏è ‡∏Ñ‡∏£‡∏π‡∏ß‡∏¥‡∏ó‡∏¢‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ ‡∏£‡∏≠‡πÅ‡∏õ‡∏õ",
  "üå™Ô∏è ‡∏™‡∏°‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏¥‡πâ‡∏ß‡∏ß‡∏ß... ‡∏£‡∏≠‡∏ú‡∏•‡πÅ‡∏õ‡πä‡∏ö",
  "üë∫ ‡πÄ‡∏î‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢! ‡πÄ‡∏à‡πâ‡∏≤‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏£‡∏∂?",
  "üë¥ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≤‡∏°‡∏õ‡∏π‡πà... ‡∏õ‡∏π‡πà‡∏¢‡∏±‡∏á‡∏´‡∏π‡∏ï‡∏∂‡∏á‡∏≠‡∏¢‡∏π‡πà",
  "üß† ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö...",
  "ü§î ‡∏Ñ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏∞...",
  "üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á...",
  "üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå...",
  "ü§ñ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö..."
];

const randomMsg = checkingMessages[Math.floor(Math.random() * checkingMessages.length)];
feedback.textContent = randomMsg;
feedback.classList.add("pulse-feedback");
  
setTimeout(() => {
  feedback.classList.remove("pulse-feedback");
  
  let isCorrect = false;
  
  if (level >= 1 && level <= 50) {
    isCorrect = userNum === correctNum;
  } else if (level >= 51 && level <= 60) {
    isCorrect = Math.abs(userNum - correctNum) < 0.01;
  } 
  console.log("‡∏£‡∏∞‡∏î‡∏±‡∏ö:", level);
  console.log("User:", userNum, "Correct:", correctNum);
  console.log("Difference:", Math.abs(userNum - correctNum));
  console.log("isCorrect:", isCorrect);
  
 
  
  if (timerId) {
    clearInterval(timerId);
    timerId = null;
  }

 if (isCorrect) {
  score += 10;
  feedback.textContent = "‚úÖ ‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å! ‡∏õ‡∏µ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤!";
  
  if (level % 10 === 0 && subLevel < 2) {
    subLevel++;
  } else {
    level++;
    subLevel = 0;
  }
  if (lastShownLevelMessage !== level) {
  showLevelMessage(level);
  lastShownLevelMessage = level;
}
   tryDropItem();
   if (level === 40) {
  feedback.textContent += " üëÄ ‡∏à‡∏≠‡∏°‡∏°‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡πà‡∏≤‡∏ô...";

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏≤‡∏™ shake ‡πÅ‡∏•‡∏∞ glow
  document.body.classList.add("shake-slight", "glow");

  // ‡∏•‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  setTimeout(() => {
    document.body.classList.remove("shake-slight", "glow");
  }, 2000);
}
  if (level === 81) { ///‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ï‡∏≤‡∏¢
    feedback.textContent = "üìâ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏ó‡πà‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏á‡∏´‡∏•‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏≠‡∏Ñ‡∏≠‡∏¢";
    endGame();
    return;
  }
  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏∏‡∏Å ‡πÜ 4 ‡πÄ‡∏•‡πÄ‡∏ß‡∏• (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5)
  if (level % 4 === 0 && hp < maxHp) {
    hp++;
    console.log("üéâ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÄ‡∏û‡∏¥‡πà‡∏°! HP =", hp);
    feedback.textContent += " ‚ù§Ô∏è ‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï +1!";
  }

} else {
  hp--;
  feedback.textContent = `‚ùå ‡∏ú‡∏¥‡∏î!‡∏ó‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡πÇ‡∏à‡∏°‡∏ï‡∏µ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠ ${correctNum}`;

  // üî¥ ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏™‡∏±‡πà‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏•‡∏î
  document.body.classList.add("shake");
  setTimeout(() => {
    document.body.classList.remove("shake");
  }, 400);
}

if (hp <= 0 || level > 100) {
  endGame();
  return;
}

 updateUI();
  updateHighscoreIfNeeded();
      generateQuestion();
  }, 2000); // ‚Üê<< ‡∏õ‡∏¥‡∏î setTimeout ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
}
function checkAnswerFromInputs() {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á .final-answer ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const finalAnswerInputs = document.querySelectorAll("#question-grid input.final-answer");
  const regularInputs = document.querySelectorAll("#question-grid input:not([readonly])");

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á final-answer ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏ä‡πâ input ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const inputs = finalAnswerInputs.length > 0 ? finalAnswerInputs : regularInputs;

  let value = "";
  inputs.forEach((input) => value += input.value.trim());

  if (!value || isNaN(value)) {
    const feedback = document.getElementById("feedback");
    if (feedback) feedback.textContent = "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!";
    return;
  }
  console.log("‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≤‡∏Å input:", value);
  checkAnswer(value);
}
function endGame() {
  if (alreadyEnded) return;
  alreadyEnded = true;

  const timestamp = Date.now();
  const gameStats = {
    name: playerName,
    score: score,
    level: level,
    result: hp <= 0 ? "Game Over" : "Completed",
    timestamp: timestamp
  };

  // üü° ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏á Firebase
  db.ref("tower-history/" + playerName + "/" + timestamp).set(gameStats)
    .then(() => {
      console.log("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß");

      // üéØ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ saveScore ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö leaderboard
      saveScore(() => {
        alert(`‡∏à‡∏ö‡πÄ‡∏Å‡∏°! ‡∏ó‡πà‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏á‡∏´‡∏•‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏≠‡∏Ñ‡∏≠‡∏¢ ‡∏û‡∏•‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ: ${score}`);

        document.getElementById("game").style.display = "none";
        document.getElementById("login-screen").style.display = "block";

        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤
        score = 0;
        level = 1;
        hp = 3;
        timeUp = false;
        subLevel = 0;
        updateUI();
        updateHearts();

        alreadyEnded = false;
      });
    })
    .catch((error) => {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: ", error);
      alreadyEnded = false;
    });
}
// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
function checkChoiceAnswer(selected) {
  const feedback = document.getElementById("feedback");

  if (selected == currentAnswer) {
    score += 10;
    level++;
    feedback.textContent = "‚úÖ ‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å! ‡∏õ‡∏µ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤!";
  } else {
    hp--;
    feedback.textContent = `‚ùå ‡∏ú‡∏¥‡∏î!‡∏ó‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡πÇ‡∏à‡∏°‡∏ï‡∏µ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠ ${currentAnswer}`;
  }

  if (hp <= 0 || level > 100) {
    endGame();
    return;
  }

  updateUI();
  setTimeout(generateQuestion, 1000);
}

// ===================================
// ‚úçÔ∏è 6. Rendering Functions
// ===================================
function renderVerticalOperation(a, b, operator) {
  const container = document.getElementById("question-grid");
  container.innerHTML = '';
  const maxLength = 11;
    container.className = ''; 
  if (operator === '+' || operator === '-') {
  container.classList.add('math-grid');

  const isDecimal = a % 1 !== 0 || b % 1 !== 0;
  const aFormatted = isDecimal ? a.toFixed(2) : a.toString();
  const bFormatted = isDecimal ? b.toFixed(2) : b.toString();

  const aStr = aFormatted.padStart(maxLength, ' ').split('');
  const bStr = bFormatted.padStart(maxLength - 1, ' ').split('');

  // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏±‡∏ß‡∏ï‡∏±‡πâ‡∏á
  aStr.forEach(d => {
    const cell = document.createElement('div');
    cell.className = 'math-cell';
    cell.textContent = d.trim();
    container.appendChild(cell);
  });

  // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° operator
  const opRow = [operator, ...bStr];
  opRow.slice(0, maxLength).forEach(d => {
    const cell = document.createElement('div');
    cell.className = 'math-cell';
    cell.textContent = d.trim();
    container.appendChild(cell);
  });

  // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 3: ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
  for (let i = 0; i < maxLength; i++) {
    const cell = document.createElement('div');
    cell.className = 'math-cell';
    cell.innerHTML = `<input maxlength="1" style="width:100%; border:none; text-align:center;">`;
    container.appendChild(cell);
  }
}
  else if (operator === '*') {
  container.classList.add('math-grid');

  const isDecimal = a % 1 !== 0 || b % 1 !== 0;
  const aFormatted = isDecimal ? a.toFixed(2) : a.toString();
  const bFormatted = isDecimal ? b.toFixed(2) : b.toString();

  const aStr = aFormatted.padStart(maxLength, ' ').split('');
  const bStr = bFormatted.padStart(maxLength - 1, ' ').split('');
  const multiplierDigits = bFormatted.replace('.', '').split('').reverse();

  // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏±‡∏ß‡∏ï‡∏±‡πâ‡∏á
  aStr.forEach(d => {
    const cell = document.createElement('div');
    cell.className = 'math-cell';
    cell.textContent = d.trim();
    container.appendChild(cell);
  });

  // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏° operator
  const row2 = [operator, ...bStr];
  row2.slice(0, maxLength).forEach(d => {
    const cell = document.createElement('div');
    cell.className = 'math-cell';
    cell.textContent = d.trim();
    container.appendChild(cell);
  });

  // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡∏ì‡∏¢‡πà‡∏≠‡∏¢
  multiplierDigits.forEach((digit, i) => {
    const row = new Array(maxLength).fill('');
    const partialProduct = (a * parseFloat(digit)).toString().split('').reverse();

    for (let j = 0; j < partialProduct.length; j++) {
      const index = maxLength - 1 - j - i;
      if (index >= 0) row[index] = ''; // ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
    }

    row.forEach(() => {
      const cell = document.createElement('div');
      cell.className = 'math-cell';
      cell.innerHTML = `<input maxlength="1" style="width:100%; border:none; text-align:center;">`;
      container.appendChild(cell);
    });
  });

  // ‡πÅ‡∏ñ‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ‡∏ú‡∏•‡∏£‡∏ß‡∏°
  for (let i = 0; i < maxLength; i++) {
  const cell = document.createElement('div');
  cell.className = 'math-cell';
  cell.innerHTML = `<input class="final-answer" maxlength="1" style="width:100%; border:none; text-align:center;">`;
  container.appendChild(cell);
}
    
  } else if (operator === '/') {
  container.classList.add('horizontal-layout');
  const wrapper = document.createElement("div");
  wrapper.style.display = "flex";
  wrapper.style.justifyContent = "center";
  wrapper.style.alignItems = "center";
  wrapper.style.flexWrap = "wrap";
  wrapper.style.gap = "10px";
  wrapper.style.fontSize = "28px";
  wrapper.style.color = "black";

  const isDecimal = a % 1 !== 0 || b % 1 !== 0;
  const aFormatted = isDecimal ? a.toFixed(2) : a.toString();
  const bFormatted = isDecimal ? b.toFixed(2) : b.toString();

  const label = document.createElement("span");
  label.textContent = `${aFormatted} √∑ ${bFormatted} =`;
  label.style.color = "black";

  const input = document.createElement("input");
  input.setAttribute("inputmode", "decimal");
  input.setAttribute("maxlength", "12");
  input.style.fontSize = "24px";
  input.style.textAlign = "center";
  input.style.border = "none";
  input.style.borderBottom = "2px solid black";
  input.style.color = "black";
  input.style.background = "white";
  input.style.width = "120px";

  input.addEventListener("keydown", (e) => {
    if (e.key === "Enter") checkAnswer(input.value.trim());
  });

  wrapper.appendChild(label);
  wrapper.appendChild(input);
  container.appendChild(wrapper);

  currentAnswer = (a / b).toFixed(2); // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏ö‡∏ö‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
}
}
const sheetUrl = "https://opensheet.vercel.app/1ZhBlwzfeGMHY9OcBbLDp3Iyn7m46WxV6yJNfNqYTVvg/Sheet1";
function renderHorizontalTwoStep(expression) {
  const container = document.getElementById("question-grid");
  container.innerHTML = '';
  container.className = 'horizontal-layout';

  const wrapper = document.createElement("div");
  wrapper.style.display = "flex";
  wrapper.style.justifyContent = "center";
  wrapper.style.alignItems = "center";
  wrapper.style.flexWrap = "wrap";
  wrapper.style.gap = "10px";
  wrapper.style.fontSize = "28px";
  wrapper.style.color = "black";

  const label = document.createElement("span");
  label.textContent = `${expression} =`;
  label.style.color = "black";

  const input = document.createElement("input");
  input.setAttribute("inputmode", "decimal");
  input.setAttribute("maxlength", "12");
  input.style.fontSize = "24px";
  input.style.textAlign = "center";
  input.style.border = "none";
  input.style.borderBottom = "2px solid black";
  input.style.background = "white";
  input.style.width = "120px";

  input.addEventListener("keydown", (e) => {
    if (e.key === "Enter") checkAnswer(input.value.trim());
  });

  wrapper.appendChild(label);
  wrapper.appendChild(input);
  container.appendChild(wrapper);
}
function renderVerticalDecimalOperation(a, b, operator) {
  const container = document.getElementById("question-grid");
  container.innerHTML = '';
  container.className = 'math-grid';

  const maxLength = 11;

  // ‡∏à‡∏±‡∏î format ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
  const aStr = a.toFixed(2).padStart(maxLength, ' ').split('');
  const bStr = b.toFixed(2).padStart(maxLength - 1, ' ').split('');

  // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏±‡∏ß‡∏ï‡∏±‡πâ‡∏á
  aStr.forEach(d => {
    const cell = document.createElement('div');
    cell.className = 'math-cell';
    cell.textContent = d.trim();
    container.appendChild(cell);
  });

  // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á + ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢
  const opRow = [operator, ...bStr];
  opRow.slice(0, maxLength).forEach(d => {
    const cell = document.createElement('div');
    cell.className = 'math-cell';
    cell.textContent = d.trim();
    container.appendChild(cell);
  });

  // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 3: ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
  for (let i = 0; i < maxLength; i++) {
    const cell = document.createElement('div');
    cell.className = 'math-cell';
    cell.innerHTML = `<input maxlength="1" style="width:100%; border:none; text-align:center;">`;
    container.appendChild(cell);
  }
}
function renderChoiceQuestion(q) {
  document.getElementById("question-grid").innerHTML = q.question;

  const raw = [q.choice1, q.choice2, q.choice3, q.choice4, q.choice5].filter(c => c);
  const shuffled = raw.sort(() => Math.random() - 0.5);

  const buttons = document.querySelectorAll(".choice-btn");
  document.getElementById("multiple-choice").style.display = "block";
  buttons.forEach((btn, i) => {
    if (shuffled[i]) {
      btn.style.display = "inline-block";
      btn.textContent = shuffled[i];
      btn.disabled = false;
      btn.onclick = () => {
        if (shuffled[i] === q.correct) {
          score += 10;
          level++;
          feedback.textContent = "‚úÖ ‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å! ‡∏õ‡∏µ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤!";
        } else {
          hp--;
          feedback.textContent = `‚ùå ‡∏ú‡∏¥‡∏î!‡∏ó‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡πÇ‡∏à‡∏°‡∏ï‡∏µ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠ ${q.correct}`;
        }
        updateUI();
        document.getElementById("multiple-choice").style.display = "none";
        setTimeout(() => hp > 0 ? generateQuestion() : endGame(), 500);
      };
    } else {
      btn.style.display = "none";
    }
  });
}
function renderMultipleChoice(question, choices) {
  const qDiv = document.getElementById("question-grid");

  // üîß ‡πÅ‡∏Å‡πâ style ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
  qDiv.style.writingMode = "horizontal-tb";
  qDiv.style.whiteSpace = "normal";
  qDiv.style.display = "block";

  qDiv.innerHTML = `<div style="font-size: 20px; margin-bottom: 10px;">${question}</div>`;

  const choiceDiv = document.getElementById("multiple-choice");
  const buttons = choiceDiv.querySelectorAll(".choice-btn");
  choiceDiv.style.display = "block";

  buttons.forEach((btn, idx) => {
    btn.textContent = choices[idx];
    btn.onclick = () => checkChoiceAnswer(choices[idx]);
  });
}
function showMultipleChoice(correctAnswer) {
  const container = document.getElementById("multiple-choice");
  const input = document.getElementById("answer-input"); // input ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
  const buttons = container.querySelectorAll(".choice-btn");

  // ‡∏ã‡πà‡∏≠‡∏ô input ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°
  input.style.display = "none";
  container.style.display = "block";

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
  const choices = new Set([correctAnswer]);
  while (choices.size < 4) {
    const fake = correctAnswer + Math.floor(Math.random() * 20 - 10);
    choices.add(fake);
  }

  // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
  const shuffled = Array.from(choices).sort(() => Math.random() - 0.5);

  // ‡∏ú‡∏π‡∏Å‡∏õ‡∏∏‡πà‡∏°
  buttons.forEach((btn, idx) => {
    btn.textContent = shuffled[idx];
    btn.onclick = () => {
      if (shuffled[idx] == correctAnswer) {
        handleCorrectAnswer(); // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å
      } else {
        handleWrongAnswer(); // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î
      }
    };
  });
}

// ===================================
// üß∞ 7. Inventory & Item System
// ===================================
function tryDropItem() {
  const dropChance = Math.random();

  // üß† ‡∏´‡∏¢‡∏±‡πà‡∏á‡∏£‡∏π‡πâ ‚Äì 1%
  if (dropChance < 0.01) {
    inventory.push("üß†");
    showItemDrop("üß† ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ‚Äò‡∏´‡∏¢‡∏±‡πà‡∏á‡∏£‡∏π‡πâ‚Äô!");
  
  // üß™ ‡∏ä‡∏∏‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‚Äì 1% ‡∏ñ‡∏∂‡∏á 3%
  } else if (dropChance < 0.03) {
    inventory.push("üß™");
    showItemDrop("üß™ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ‚Äò‡∏ä‡∏∏‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‚Äô!");
  
  } else if (chance < 0.07) {
    addItem("üéÅ ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏∏‡πà‡∏°");
  
  
  // üïí ‡∏ö‡∏±‡∏ï‡∏£‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äì 3% ‡∏ñ‡∏∂‡∏á 5% (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏î‡πà‡∏≤‡∏ô 6 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ)
  } else if (dropChance < 0.05 && level >= 6) {
    inventory.push("üïí");
    showItemDrop("üïí ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ‚Äò‡∏ö‡∏±‡∏ï‡∏£‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‚Äô!");
    

  // ‚ù§Ô∏è ‡∏´‡∏£‡∏∑‡∏≠ üíé (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏î / ‡πÄ‡∏û‡∏¥‡πà‡∏° MaxHP) ‚Äì 5% ‡∏ñ‡∏∂‡∏á 10%
  } else if (dropChance < 0.10) {
    const itemType = Math.random() < 0.5 ? "hp" : "maxHp";

    if (itemType === "hp") {
      inventory.push("‚ù§Ô∏è");
      showItemDrop("‚ù§Ô∏è ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏î!");
    } else if (maxHp < maxMaxHp) {
      inventory.push("üíé");
      showItemDrop("üíé ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏µ‡∏î‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï!");
    } else {
      // ‡∏ñ‡πâ‡∏≤ Max HP ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏î‡∏£‡∏≠‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏ó‡∏ô
      inventory.push("‚ù§Ô∏è");
      showItemDrop("‚ù§Ô∏è ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏î!");
    }
  }

  updateInventoryUI();
}
function useItem(index) {
  const item = inventory[index];

  if (item === "‚ù§Ô∏è" && hp < maxHp) {
    hp++;
    showItemDrop("üíñ ‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏î +1");
  } else if (item === "üíé" && maxHp < maxMaxHp) {
    maxHp++;
    hp++; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏î‡πâ‡∏ß‡∏¢
    showItemDrop("‚ú® Max HP +1 ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏î");
  } else if (item === "üß† ‡∏´‡∏¢‡∏±‡πà‡∏á‡∏£‡∏π‡πâ") {
    showItemDrop(`üß† ‡πÄ‡∏â‡∏•‡∏¢‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: ${currentAnswer}`);
  } else if (item === "üß™ ‡∏ä‡∏∏‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï") {
    reviveItemUsed = true;
    showItemDrop("üß™ ‡∏ä‡∏∏‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï! ‡∏à‡∏∞‡∏£‡∏≠‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏¢ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
  } else if (item === "üïí ‡∏ö‡∏±‡∏ï‡∏£‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á") {
    showItemDrop("‚õî ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ö‡∏±‡∏ï‡∏£‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ");
    return; // ‚ùó ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
  } else if (item === "üéÅ ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏∏‡πà‡∏°") {
    useMysteryBox(); // ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏∏‡πà‡∏°
  } else {
    showItemDrop("‚õî ‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ");
    return;
  }

  // ‡∏•‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  inventory.splice(index, 1);
  updateInventoryUI();
  updateUI();
}
function showItemDrop(text) {
  const popup = document.getElementById("itemDropPopup");
  popup.textContent = text;
  popup.style.display = "block";

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å animation ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï class
  popup.classList.remove("item-drop-popup");
  void popup.offsetWidth; // trick ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä animation
  popup.classList.add("item-drop-popup");

  // ‡∏ã‡πà‡∏≠‡∏ô popup ‡∏´‡∏•‡∏±‡∏á 2 ‡∏ß‡∏¥
  setTimeout(() => {
    popup.style.display = "none";
  }, 2000);
}
function useMysteryBox() {
  const outcomes = [
        { emoji: "üò¢", message: "‡πÅ‡∏´‡πâ‡∏ß‡∏ß‡∏ß‡∏ß‡∏ß‡∏ß‡∏ß~", action: () => {} } // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
  ];

  const result = outcomes[Math.floor(Math.random() * outcomes.length)];
  result.action();
  showItemDrop(`${result.emoji} ${result.message}`);
  updateHearts();
  updateInventoryUI();
}

// ===================================
// üìä 8. Firebase Functions
// ===================================
function saveScore(callback) {
  const ref = db.ref("tower-leaderboard/" + playerName);
  ref.set({
    name: playerName,
    score: score,
    level: level,
    timestamp: Date.now()
  }).then(() => {
    updateLeaderboard(); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    if (callback) callback();
  });
}
function updateHighscoreIfNeeded(callback) {
  const ref = db.ref("tower-leaderboard/" + playerName);

  ref.once("value").then(snapshot => {
    const existing = snapshot.val();
    const prevScore = existing?.score || 0;

    if (score > prevScore) {
      ref.set({
        name: playerName,
        score: score,
        level: level,
        timestamp: Date.now()
      }).then(() => {
        updateLeaderboard();
        if (callback) callback();
      });
    } else {
      if (callback) callback(); // ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏ó‡∏≥ callback ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
    }
  });
}
async function fetchChoiceQuestion(level) {
  const url = "https://opensheet.vercel.app/1ZhBlwzfeGMHY9OcBbLDp3Iyn7m46WxV6yJNfNqYTVvg/Sheet1";

  try {
    const res = await fetch(url);
    const data = await res.json();

    const item = data[Math.floor(Math.random() * data.length)];
    if (!item) return;

    const allChoices = shuffle([
  item.correct,
  item.choice1,
  item.choice2,
  item.choice3,
  item.choice4,
  item.choice5,
].filter(Boolean));

    currentAnswer = item.correct;
    renderMultipleChoice(item.question, allChoices);
    document.getElementById("submitBtn").style.display = "none";
  } catch (err) {
    console.error("Error fetching multiple choice question:", err);
  }
}
function updateLeaderboard() {
  const list = document.getElementById("leaderboard-list");
  const boardRef = db.ref("tower-leaderboard");

  boardRef.once("value", snapshot => {
    const entries = [];

    snapshot.forEach(child => {
      const val = child.val();
      if (val && typeof val.score === "number") {
        entries.push(val);
      }
    });

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
    entries.sort((a, b) => b.score - a.score);

    // ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡∏°‡πà
    list.innerHTML = "";

    const medals = ["ü•á", "ü•à", "ü•â"];

    entries.slice(0, 10).forEach((entry, index) => {
      const li = document.createElement("li");
      li.style.marginBottom = "6px";

      const rank = medals[index] || `${index + 1}.`;

      const topLineClass = `rank-${index + 1}`;
li.innerHTML = `
  <div class="top-line ${topLineClass}">
    ${rank} ${entry.name}
  </div>
  <div class="bottom-line">
    ‡∏û‡∏•‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ: ${entry.score} ‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà: ${entry.level}
  </div>
`;

      list.appendChild(li);
    });
  });
}

// ===================================
// üß™ 9. Boss Functions
// ===================================
function isBossLevel(lv){ return bossLevels.includes(lv); 
   }
function showBoss(level) {
  const boss = bossData[level];
  if (!boss) return;

  const bossArea = document.getElementById("bossArea");
  const bossImgURL = bossImageURLs[level] || ""; // fallback ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ URL

  bossArea.innerHTML = `
    <div class="boss-frame ${boss.effect}">
      <img src="${bossImgURL}" alt="${boss.name}" class="boss-img">
      <div class="boss-name">üëπ ${boss.name}</div>
      <div class="boss-theme">‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ü‡πà‡∏≤‡∏ö‡∏≠‡∏™</div>
    </div>
  `;
  bossArea.style.display = "block";
}
function hideBoss(){ document.getElementById("bossArea").style.display="none"; }
function updateThemeByLevel(level){
  const body = document.body;
  const stageNameEl = document.getElementById("stageName");
  const bossArea = document.getElementById("bossArea");
  const bossImage = document.getElementById("bossImage");

  // ‡∏•‡∏ö‡∏ò‡∏µ‡∏°‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞ boss-mode
  for (let i = 1; i <= 20; i++) {
    body.classList.remove(`theme${i}`);
  }
  body.classList.remove("boss-mode");

  // ‡∏ò‡∏µ‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô
  if (level <= 5) {
    body.classList.add('theme1');
    stageNameEl.textContent = "‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î";
  } else if (level <= 9) {
    body.classList.add('theme2');
    stageNameEl.textContent = "‡∏ó‡∏∏‡πà‡∏á‡∏™‡∏ß‡∏¥‡∏ß";
  } else if (level <= 14) {
    body.classList.add('theme3');
    stageNameEl.textContent = "‡πÄ‡∏™‡∏≤‡∏´‡∏¥‡∏ô‡∏ó‡∏°‡∏¥‡∏¨";
  } else if (level <= 19) {
    body.classList.add('theme4');
    stageNameEl.textContent = "‡∏ö‡∏∂‡∏á‡∏û‡∏¥‡∏©";
  } else if (level <= 24) {
    body.classList.add('theme5');
    stageNameEl.textContent = "‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡∏≤‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á";
  } else if (level <= 29) {
    body.classList.add('theme6');
    stageNameEl.textContent = "‡∏•‡∏≤‡∏ß‡∏≤‡∏£‡πâ‡∏≠‡∏ô";
  } else if (level <= 34) {
    body.classList.add('theme7');
    stageNameEl.textContent = "‡∏•‡∏≤‡∏ô‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì";
  } else if (level <= 39) {
    body.classList.add('theme8');
    stageNameEl.textContent = "‡∏´‡∏≠‡∏Ñ‡∏≠‡∏¢‡∏°‡∏∑‡∏î";
  } else if (level <= 45) {
    body.classList.add('theme9');
    stageNameEl.textContent = "‡∏ä‡∏±‡πâ‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏Ñ‡∏≠‡∏¢‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏±‡∏á";
  } else if (level <= 49) {
    body.classList.add('theme10');
    stageNameEl.textContent = "‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏Å‡∏•‡∏≤‡∏á";
  } else if (level <= 55) {
    body.classList.add('theme11');
    stageNameEl.textContent = "‡πÄ‡∏£‡∏∑‡∏≠‡∏ö‡∏¥‡∏ô";
  } else if (level <= 59) {
    body.classList.add('theme12');
    stageNameEl.textContent = "‡∏™‡∏Å‡∏≤‡∏¢‡πÄ‡∏õ‡∏µ‡∏¢";
  } else if (level === 60) {
    body.classList.add('theme13');
    stageNameEl.textContent = "‡∏ß‡∏¥‡∏´‡∏≤‡∏£‡∏ü‡πâ‡∏≤‡∏ú‡πà‡∏≤";
  } else if (level <= 69) {
    body.classList.add('theme14');
    stageNameEl.textContent = "‡∏≠‡∏≤‡∏ì‡∏≤‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏¥‡∏ó‡∏¢‡πå";
  } else if (level <= 79) {
    body.classList.add('theme15');
    stageNameEl.textContent = "‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏´‡πà‡∏á‡∏°‡∏≤‡∏¢‡∏≤";
  } else if (level <= 80) {
    body.classList.add('theme16');
    stageNameEl.textContent = "‡∏ß‡πà‡∏≤‡∏á";
  } else if (level <= 82) {
    body.classList.add('theme17');
    stageNameEl.textContent = "‡∏ß‡πà‡∏≤‡∏á";
  } else if (level <= 84) {
    body.classList.add('theme18');
    stageNameEl.textContent = "‡∏ß‡πà‡∏≤‡∏á";
  } else {
    body.classList.add('theme19');
    stageNameEl.textContent = "‡∏ß‡πà‡∏≤‡∏á";
  }
if (isBossLevel(level)) {
  body.classList.add("boss-mode");

  if (currentShakingLevel !== level) {
    stopBossShake(); // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏™‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    startBossShake(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà
    showBossMessage?.();
    showBoss(level);
    currentShakingLevel = level;
  }

} else {
  hideBoss();
  stopBossShake();
  body.classList.remove("boss-mode");
  currentShakingLevel = null;
}
}
const bossEffects = {
  10: ["shadow-burst"],
  20: ["sky-glow"],
  30: ["wave"],
  40: ["distort"],
  50: ["shadow-burst", "distort"],
};
function showBossMessage() {
  const msg = document.createElement("div");
  msg.textContent = "‚öîÔ∏è BOSS FIGHT!";
  msg.style.position = "fixed";
  msg.style.top = "40%";
  msg.style.left = "50%";
  msg.style.transform = "translate(-50%, -50%)";
  msg.style.fontSize = "48px";
  msg.style.fontWeight = "bold";
  msg.style.color = "red";
  msg.style.textShadow = "2px 2px black";
  msg.style.zIndex = "9999";

  document.body.appendChild(msg);

  setTimeout(() => {
    msg.remove();
  }, 2000);
}
function startBossShake() {
  stopBossShake(); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô

  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏±‡πà‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ 2 ‡∏ß‡∏¥
  document.body.classList.add("boss-shaking");
  bossShakingTimeout = setTimeout(() => {
    document.body.classList.remove("boss-shaking");
  }, 2000);

  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏° setInterval ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  bossShakeInterval = setInterval(() => {
    document.body.classList.add("boss-shaking");

    bossShakingTimeout = setTimeout(() => {
      document.body.classList.remove("boss-shaking");
    }, 2000); // ‡∏™‡∏±‡πà‡∏ô 2 ‡∏ß‡∏¥
  }, 8000); // ‡∏£‡∏ß‡∏°‡∏´‡∏¢‡∏∏‡∏î 6 ‡∏ß‡∏¥
}
function stopBossShake() {
  if (bossShakeInterval) {
    clearInterval(bossShakeInterval);
    bossShakeInterval = null;
  }
  if (bossShakingTimeout) {
    clearTimeout(bossShakingTimeout);
    bossShakingTimeout = null;
  }
  document.body.classList.remove("boss-shaking");
}
const bossLevels = [10, 20, 30, 40, 50, 60, 70];
const bossData = {
  10: { name: "‡∏°‡∏±‡∏á‡∏Å‡∏£‡∏õ‡∏ê‡∏û‡∏µ", theme: "‡πÄ‡∏™‡∏≤‡∏´‡∏¥‡∏ô‡∏ó‡∏°‡∏¥‡∏¨", effect: "shake" },
  20: { name: "‡∏°‡∏±‡∏á‡∏Å‡∏£‡πÄ‡∏¢‡∏∑‡∏≠‡∏Å‡πÄ‡∏¢‡πá‡∏ô", theme: "‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡∏≤‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á", effect: "snow" },
  30: { name: "‡∏ö‡∏≠‡∏™‡πÄ‡∏á‡∏≤", theme: "‡∏•‡∏≤‡∏ô‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì", effect: "shadow-burst" },
  40: { name: "‡∏°‡∏±‡∏á‡∏Å‡∏£‡∏ó‡∏∞‡πÄ‡∏•", theme: "‡∏ä‡∏±‡πâ‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏Ñ‡∏≠‡∏¢‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏±‡∏á", effect: "wave" },
  50: { name: "Sky Leviathan", theme: "‡πÄ‡∏£‡∏∑‡∏≠‡∏ö‡∏¥‡∏ô", effect: "sky-glow" },
  60: { name: "‡∏ö‡∏≠‡∏™‡∏™‡∏≤‡∏¢‡∏ü‡πâ‡∏≤", theme: "‡∏ß‡∏¥‡∏´‡∏≤‡∏£‡∏ü‡πâ‡∏≤‡∏ú‡πà‡∏≤", effect: "lightning" },
  70: { name: "‡∏ö‡∏≠‡∏™‡∏°‡∏≤‡∏¢‡∏≤", theme: "‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏´‡πà‡∏á‡∏°‡∏≤‡∏¢‡∏≤", effect: "distort" }
};
const bossImageURLs = {
  10: "https://i.postimg.cc/FzPL4mWD/10.png",
  20: "https://i.postimg.cc/RhCHyqRW/20.png",
  30: "https://i.postimg.cc/XJk5s9wM/30.jpg",
  40: "https://i.postimg.cc/Df5ssdvL/40.png",
  50: "https://i.postimg.cc/RVFtT6h8/50.jpg",
  60: "https://i.postimg.cc/Hk87fqQ9/60.png",
  70: "https://i.postimg.cc/bvX28mgc/70.png"
};
const bossImages = {
  10: "https://i.postimg.cc/FzPL4mWD/10.png",
  20: "https://i.postimg.cc/RhCHyqRW/20.png",
  30: "https://i.postimg.cc/XJk5s9wM/30.jpg",
  40: "https://i.postimg.cc/Df5ssdvL/40.png",
  50: "https://i.postimg.cc/RVFtT6h8/50.jpg",
  60: "https://i.postimg.cc/Hk87fqQ9/60.png",
  70: "https://i.postimg.cc/bvX28mgc/70.png"
};
function applyBossEffect(level) {
  const boss = document.getElementById("bossImg");
  boss.className = ""; // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡πÄ‡∏î‡∏¥‡∏°

  const effects = bossEffects[level] || ["shadow-burst"]; // fallback effect
  effects.forEach(effect => boss.classList.add(effect));

  console.log(`üéÆ Boss LV${level} ‡πÑ‡∏î‡πâ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå: ${effects.join(", ")}`);
}
function enterBossMode() {
  bossMode = true;
  bossCorrect = 0;

  // ‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏à‡∏≠
  document.body.classList.add("shake-screen", "flash-screen", "boss-screen");

  // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á 1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏Å‡∏±‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á)
  setTimeout(() => {
    document.body.classList.remove("shake-screen", "flash-screen", "boss-screen");
  }, 1500);

  // ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏ö‡∏≠‡∏™‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà + ‡∏ö‡∏≠‡∏™‡πÄ‡∏â‡∏û‡∏≤‡∏∞ lv
  const boss = document.getElementById("bossImg");
  boss.style.transform = "scale(1.8)";
  boss.style.transition = "transform 0.3s ease";

  applyBossEffect(level); // ‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏ö‡∏≠‡∏™
}

// ===================================
// üåà 10. UI & Theme Effects
// ===================================
function updateThemeByLevel(level) { ... }
function updateBackgroundByLevel(level) {
  const bg = document.getElementById("backgroundEffect");
  if (!bg) return;
  bg.className = ""; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ò‡∏µ‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô

  if (level <= 5) {
    bg.classList.add("theme1");
  } else if (level <= 9) {
    bg.classList.add("theme2");
  } else if (level <= 14) {
    bg.classList.add("theme3");
  } else if (level <= 19) {
    bg.classList.add("theme4");
  } else if (level <= 24) {
    bg.classList.add("theme5");
  } else if (level <= 29) {
    bg.classList.add("theme6");
  } else if (level <= 34) {
    bg.classList.add("theme7");
  } else if (level <= 39) {
    bg.classList.add("theme8");
  } else if (level <= 45) {
    bg.classList.add("theme9");
  } else if (level <= 49) {
    bg.classList.add("theme10");
  } else if (level <= 55) {
    bg.classList.add("theme11");
  } else if (level <= 59) {
    bg.classList.add("theme12");
  } else if (level === 60) {
    bg.classList.add("theme13");
  } else if (level <= 69) {
    bg.classList.add("theme14");
  } else if (level <= 79) {
    bg.classList.add("theme15");
  } else if (level <= 80) {
    bg.classList.add("theme16");
  } else {
    bg.classList.add("theme-default");
  }
}
function showLevelMessage(level) {
  if (level === lastLevelMessageShown) return; // ‚õî ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ã‡πâ‡∏≥
  lastLevelMessageShown = level;
  const messages = {
    1: "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô\n‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢",
    2: "üßô‚Äç‚ôÇÔ∏è ‡∏ó‡πà‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡πá‡∏Å‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î",
    3: "üßÆ ‡∏à‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤\n‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏î‡∏π‡∏ú‡∏¥‡∏î‡∏™‡∏≤‡∏°‡∏±‡∏ç‡∏™‡∏≥‡∏ô‡∏∂‡∏Å",
    5: "üî• ‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô\n‡∏û‡∏•‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ó‡∏î‡∏™‡∏≠‡∏ö!",
    6: "üìú ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞\n‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏î‡∏£‡∏≠‡∏õ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ö‡∏±‡∏ï‡∏£‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
    7: "üó°Ô∏è ‡∏ó‡πà‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà!",
    9: "üßô‚Äç‚ôÇÔ∏è ‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏±‡πà‡∏ô‡πÑ‡∏´‡∏ß",
    10: "üëπ‡∏ö‡∏≠‡∏™‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ï‡∏±‡∏ß!!",
    11: "üìú ‡∏ô‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏î‡∏≤‡∏¢\n‡∏ó‡πà‡∏≤‡∏ô‡∏Ü‡πà‡∏≤‡∏ö‡∏≠‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏î‡∏£‡∏≠‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
    12: "üõ°Ô∏è‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡∏®‡πÄ‡∏õ‡πá‡∏ô\n‡∏ú‡∏π‡πâ‡∏Å‡∏•‡πâ‡∏≤‡πÅ‡∏´‡πà‡∏á‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô",
    14: "üëÅÔ∏è‡∏ó‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ö‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏à‡πâ‡∏≠‡∏á‡∏°‡∏≠‡∏á",
    15: " üîÆ ‡∏û‡∏•‡∏±‡∏á‡πÄ‡∏ß‡∏ó‡∏õ‡∏±‡πà‡∏ô‡∏õ‡πà‡∏ß‡∏ô",
    19: "‚ùÑÔ∏è‡∏ó‡πà‡∏≤‡∏ô‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏´‡∏ô‡∏≤‡∏ß",
    21: "‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô\nüêâ‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏≤‡∏ö‡∏°‡∏±‡∏á‡∏Å‡∏£!!!",
    22: "üëÅÔ∏è ‡πÄ‡∏à‡πâ‡∏≤‡πÅ‡∏´‡πà‡∏á‡∏´‡∏≠‡∏Ñ‡∏≠‡∏¢‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÄ‡∏´‡πá‡∏ô‡∏ó‡πà‡∏≤‡∏ô!!!",
    24: "üåã ‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≠‡∏ô ",
    29: "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏Å‡∏•‡∏à‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡∏´‡∏≠‡∏Ñ‡∏≠‡∏¢!",
    30: "‚ú® ‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ö‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á\n‡πÇ‡∏õ‡∏£‡∏î‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡πà‡∏≤‡∏ô",
    35: "üîí ‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏´‡∏ô‡πâ‡∏≤",
    40: "üîí ‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏´‡∏ô‡πâ‡∏≤",
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£üëë ‡∏ö‡∏≠‡∏™‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 3 ‡∏õ‡∏£‡∏≤‡∏Å‡∏è!\n‡∏´‡∏≤‡∏Å‡∏ä‡∏ô‡∏∞‡πÑ‡∏î‡πâ ‡πÄ‡∏à‡πâ‡∏≤‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏Å‡∏•‡πâ‡∏≤‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á!
  };
  
  if (messages[level]) {
    const msg = messages[level].replace(/\n/g, "<br>");
    document.getElementById("levelMessageText").innerHTML = msg;
    document.getElementById("levelMessageBox").style.display = "block";
  }
}
function hideLevelMessage() {
  document.getElementById("levelMessageBox").style.display = "none";
}
document.getElementById("submitBtn").onclick = function () {
  const userAnswer = document.getElementById("answer").value.trim();

  this.disabled = true; // ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
  document.getElementById("feedback").textContent = getRandomWaitMessage();

  setTimeout(() => {
    if (userAnswer === currentAnswer) {
      document.getElementById("feedback").textContent = "‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!";
      level++;
      updateScore();
    } else {
      document.getElementById("feedback").textContent = `‚ùå ‡∏ú‡∏¥‡∏î‡∏à‡πâ‡∏≤! ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏∑‡∏≠ ${currentAnswer}`;
      hp--;
      updateHearts();
    }

    if (hp <= 0) {
      endGame();
    } else {
      setTimeout(() => {
        generateQuestion();
        document.getElementById("submitBtn").disabled = false;
      }, 1000);
    }
  }, 2000);
};
// ===================================
// üì¶ 11. Utility Functions
// ===================================
function getRandom(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
/ üîÑ ‡∏™‡∏∏‡πà‡∏°‡∏ä‡πâ‡∏≠‡∏¢
function shuffle(array) {
  return array.sort(() => Math.random() - 0.5);
}
function getRandomWaitMessage() {
  const messages = [
    "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö...",
    "üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ...",
    "ü§î ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ô‡∏µ‡πâ... ‡∏à‡∏∞‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "üìö ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•...",
    "üßæ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô...",
    "üåÄ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏±‡πà‡∏ô‡∏™‡∏∞‡πÄ‡∏ó‡∏∑‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∏‡πâ‡∏ô!",
  ];
  return messages[Math.floor(Math.random() * messages.length)];
}

// ===================================
// üß∑ 12. Event Bindings
// ===================================
document.addEventListener("DOMContentLoaded", () => {
  updateLeaderboard();

   const submitBtn = document.getElementById("submitBtn");
  submitBtn.replaceWith(submitBtn.cloneNode(true)); // ‡∏•‡∏ö event ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å
   });

document.getElementById("submitBtn").addEventListener("click", () => {
    const mc = document.getElementById("multiple-choice");
    if (mc.style.display === "none") {
      checkAnswerFromInputs();
    } else {
      // logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö multiple-choice
    }
  });
   console.log("üü° [LOG] ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å");
  const mc = document.getElementById("multiple-choice");
  if (mc.style.display === "none") {
    checkAnswerFromInputs();
  } else {
    // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö multiple-choice ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡πÉ‡∏™‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ
  }
});
document.getElementById("startBtn").addEventListener("click", () => {
  const loginScreen = document.getElementById("login-screen");
  const gameScreen = document.getElementById("game");
updateHearts();
  playerName = document.getElementById("playerName").value.trim();
  if (!playerName) {
    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°");
    return; // ‚úÖ return ‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô OK
  }

  loginScreen.classList.add("fade-out");

  setTimeout(() => {
    loginScreen.style.display = "none";
    gameScreen.classList.add("fade-in");
    gameScreen.style.display = "block";

    updateUI();
    generateQuestion();
  }, 800); // ‚úÖ ‡∏´‡∏•‡∏±‡∏á fade-out ‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
});
document.getElementById("retryBtn").addEventListener("click", () => {
    if (hp <= 0) {
      document.getElementById("feedback").textContent = "üíÄ ‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß! ‡∏ó‡πà‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏á‡∏•‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏≠‡∏Ñ‡∏≠‡∏¢";
      return;
    }
    document.getElementById("feedback").textContent = "";
    document.getElementById("submitBtn").disabled = false;
    document.getElementById("retryBtn").style.display = "none";
    timeUp = false;
    generateQuestion();
  });
window.onload = function() {
  window.scrollTo(0, 0);
};

// Firebase Connection Watcher
firebase.database().ref(".info/connected").on("value", function(snapshot) {
  if (snapshot.val() === false) {
    alert("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡∏Ç‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠");
  }
});
